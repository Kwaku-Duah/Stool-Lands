// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"

  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum ROLE {
  ADMIN
  CHIEF
  SECRETARY
  INSPECTOR
  APPLICANT
}

model User {
  id             Int           @id @default(autoincrement())
  name           String
  email          String?       @unique
  phoneNumber    String        @unique
  occupation     String
  password       String
  changePassword Boolean       @default(true)
  role           ROLE
  applications   Application[]
  stateform      stateForm[]
  transaction    Transaction[]

  OrganizationForm OrganizationForm[]
  activeStatus     Boolean            @default(true)

  Inspector Inspector?
}

model payableService {
  id          Int      @id @default(autoincrement())
  code        String   @unique
  name        String
  amount      Float
  currency    String
  tags        String[]
  description String
}

model Transaction {
  id                  Int      @id @default(autoincrement())
  status              String
  clientReference     String   @unique
  serviceId           String
  description         String
  createdAt           DateTime
  customerName        String
  User                User     @relation(fields: [userId], references: [id])
  userId              Int
  paymentProvider     String
  phoneNumber         String
  isPaymentCompleted  Boolean
  isServiceCompleted  Boolean
  amount              Float
  MobileMoneyNumber   String?
  PaymentType         String?
  Channel             String?
  ProviderDescription String?
}

// updating stuff

model stateForm {
  id              Int        @id @default(autoincrement())
  token           String     @unique
  User            User       @relation(fields: [userId], references: [id])
  userId          Int
  clientReference String     @unique
  status          FormStatus
}

model Application {
  id                     Int               @id @default(autoincrement())
  uniqueFormID           String            @unique
  applicantName          String
  applicantDOB           DateTime[]
  mailingAddress         String
  contactNumber          String
  emailAddress           String
  placeOfResidence       String
  hometown               String
  maritalStatus          String
  nextOfKin              String
  landLocality           String
  siteName               String
  plotNumbers            String
  totalLandSize          String
  streetName             String
  landTransferor         String
  dateOfOriginalTransfer DateTime
  purposeOfLand          String
  contactOfTransferor    String?
  type                   String?
  documents              File[]
  status                 ApplicationStatus
  state                  FormIssue         @default(UNASSIGNED)
  createdAt              DateTime          @default(now())
  User                   User              @relation(fields: [userId], references: [id])
  userId                 Int
  formStatus             FormState         @default(NEW)
  inspector              Inspector?        @relation(fields: [inspectorId], references: [id])
  inspectorId            Int?
}

model OrganizationForm {
  id                     Int               @id @default(autoincrement())
  uniqueFormID           String            @unique
  organisationName       String
  location               String
  mailingAddress         String
  contactNumber          String
  emailAddress           String
  landLocality           String
  siteName               String
  plotNumbers            String
  totalLandSize          String
  streetName             String
  landTransferor         String
  dateOfOriginalTransfer DateTime
  purposeOfLand          String
  contactOfTransferor    String?
  type                   String?
  documents              orgDocument[]
  status                 ApplicationStatus @default(PENDING)
  state                  FormIssue         @default(UNASSIGNED)
  createdAt              DateTime          @default(now())
  User                   User              @relation(fields: [userId], references: [id])
  userId                 Int
  formStatus             FormState         @default(NEW)
  inspector              Inspector?        @relation(fields: [inspectorId], references: [id])
  inspectorId            Int?
}

enum FormIssue {
  ASSIGNED
  UNASSIGNED
}

model File {
  id            Int         @id @default(autoincrement())
  application   Application @relation(fields: [applicationId], references: [id])
  applicationId Int
  url           String
}

model orgDocument {
  id                 Int              @id @default(autoincrement())
  url                String
  OrganizationForm   OrganizationForm @relation(fields: [organizationFormId], references: [id])
  organizationFormId Int
}

enum ApplicationStatus {
  PENDING
  APPROVED
  DENIED
}

enum DocumentType {
  INDENTURE
  FORMER_ALLOCATION
  SITE_PLAN
  ID_CARD
}

enum PaymentType {
  PROCESSING_FEE
  INSPECTION_FEE
  DRINKS_MONEY
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum FormState {
  NEW
  FILLED
}

enum FormStatus {
  USED
  UNUSED
  EXPIRED
  INACTIVE
}

model Report {
  id          Int    @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String
  phoneNumber String
  description String
}

model Ticket {
  id          Int           @id @default(autoincrement())
  name        String
  email       String
  issue       String
  createdAt   DateTime      @default(now())
  appNumber   String?
  priority    String
  description String
  status      TicketStatus  @default(PENDING)
  replies     TicketReply[]
}

model TicketReply {
  id        Int    @id @default(autoincrement())
  response  String
  ticketing Ticket @relation(fields: [ticketId], references: [id])
  ticketId  Int
}

enum TicketStatus {
  ADDRESSED
  PENDING
}

model Secretary {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  secretaryId String       @unique
  assignments Assignment[]
}

model Inspector {
  id                Int                @id @default(autoincrement())
  email             String             @unique
  inspectorId       String             @unique
  invitations       Invitation[]
  appointments      Appointment[]
  applications      Application[]
  organizationForms OrganizationForm[]
  user              User?              @relation(fields: [email], references: [email])
}

model Reason {
  id           Int     @id @default(autoincrement())
  uniqueFormID String  @unique
  InspectorId  String
  reject       String?
}

model InspectUpload {
  id           Int              @id @default(autoincrement())
  uniqueFormID String           @unique
  inspectorId  String
  documents    ProofDocuments[]
  createdAt    DateTime         @default(now())
}

model ProofDocuments {
  id              Int           @id @default(autoincrement())
  url             String
  inspection      InspectUpload @relation(fields: [inspectUploadId], references: [id])
  inspectUploadId Int
}

model Assignment {
  id           Int          @id @default(autoincrement())
  uniqueFormID String?      @unique
  secretaryId  String
  timeAssigned DateTime     @default(now())
  isAssigned   Boolean      @default(false)
  secretary    Secretary    @relation(fields: [secretaryId], references: [secretaryId])
  invitations  Invitation[]
}

model Invitation {
  id           Int         @id @default(autoincrement())
  inspectors   Inspector[]
  timeAssigned DateTime    @default(now())
  Assignment   Assignment? @relation(fields: [assignmentId], references: [uniqueFormID])
  assignmentId String?
}

model Chief {
  id      Int    @id @default(autoincrement())
  email   String @unique
  chiefId String @unique
}

model Appointment {
  id             Int       @id @default(autoincrement())
  title          String
  tag            String
  applicantName  String
  inspectorEmail String
  inspector      Inspector @relation(fields: [inspectorId], references: [id])
  inspectorId    Int
  scheduledAt    DateTime?
}
