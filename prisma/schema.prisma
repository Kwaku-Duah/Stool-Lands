// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"

  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum ROLE {
  ADMIN
  CHIEF
  SECRETARY
  INSPECTOR
  APPLICANT
}

model User {
  id           Int           @id @default(autoincrement())
  name         String
  email        String?       @unique
  phoneNumber  String        @unique
  occupation   String
  password     String
  changePassword Boolean @default(true)
  role         ROLE
  applications Application[]
  stateform    stateForm[]
  transaction  Transaction[]

  OrganizationForm OrganizationForm[]
}

model payableService {
  id          Int      @id @default(autoincrement())
  code        String   @unique
  name        String
  amount      Float
  currency    String
  tags        String[]
  description String
}

model Transaction {
  id                 Int      @id @default(autoincrement())
  status             String
  clientReference    String   @unique
  serviceId          String
  description        String
  createdAt          DateTime
  customerName       String
  User               User     @relation(fields: [userId], references: [id])
  userId             Int
  paymentProvider    String
  phoneNumber        String
  isPaymentCompleted Boolean
  isServiceCompleted Boolean
  amount             Float
  MobileMoneyNumber       String?
  PaymentType             String?
  Channel                 String?
  ProviderDescription     String?
}

// updating stuff

model stateForm {
  id              Int        @id @default(autoincrement())
  token           String     @unique
  User            User       @relation(fields: [userId], references: [id])
  userId          Int
  clientReference String     @unique
  status          FormStatus
}

model Application {
  id                     Int               @id @default(autoincrement())
  uniqueFormID           String            @unique
  applicantName          String
  applicantDOB           DateTime[]
  mailingAddress         String
  contactNumber          String
  emailAddress           String
  placeOfResidence       String
  hometown               String
  maritalStatus          String
  nextOfKin              String
  landLocality           String
  siteName               String
  plotNumbers            String
  totalLandSize          String
  streetName             String
  landTransferor         String
  dateOfOriginalTransfer DateTime
  purposeOfLand          String
  contactOfTransferor    String?
  type                   String?
  documents              File[]
  status                 ApplicationStatus
  createdAt              DateTime          @default(now())
  User                   User              @relation(fields: [userId], references: [id])
  userId                 Int
  formStatus             FormState        @default(NEW)
}

model OrganizationForm {
  id                     Int               @id @default(autoincrement())
  uniqueFormID           String            @unique
  organisationName       String
  location               String
  mailingAddress         String
  contactNumber          String
  emailAddress           String
  landLocality           String
  siteName               String
  plotNumbers            String
  totalLandSize          String
  streetName             String
  landTransferor         String
  dateOfOriginalTransfer DateTime
  purposeOfLand          String
  contactOfTransferor    String?
  type                   String?
  documents              orgDocument[]
  status                 ApplicationStatus
  createdAt              DateTime          @default(now())
  User                   User              @relation(fields: [userId], references: [id])
  userId                 Int
  formStatus             FormState       @default(NEW)
}

model File {
  id            Int          @id @default(autoincrement())
  application   Application  @relation(fields: [applicationId], references: [id])
  applicationId Int
  url         String
}

model orgDocument {
  id                 Int              @id @default(autoincrement())
  url              String
  OrganizationForm   OrganizationForm @relation(fields: [organizationFormId], references: [id])
  organizationFormId Int
}

enum ApplicationStatus {
  PENDING
  APPROVED
  DENIED
}

enum DocumentType {
  INDENTURE
  FORMER_ALLOCATION
  SITE_PLAN
  ID_CARD
}

enum PaymentType {
  PROCESSING_FEE
  INSPECTION_FEE
  DRINKS_MONEY
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum FormState {
  NEW
  FILLED
}


enum FormStatus {
  USED
  UNUSED
  EXPIRED
  INACTIVE
}

model Report {
  id          Int    @id @default(autoincrement())
  email       String
  issue       String
  priority    String
  description String
}

model Ticket {
  id          Int    @id @default(autoincrement())
  email       String
  issue       String
  appNumber   String
  priority    String
  description String
}


model Secretary {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  secretaryId String       @unique
  assignments Assignment[]
}

model Inspector {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  inspectorId String       @unique
  invitations Invitation[]
}

model Assignment {
  id           Int       @id @default(autoincrement())
  uniqueFormId String    @unique
  secretaryId  String
  secretary    Secretary @relation(fields: [secretaryId], references: [secretaryId])
}

model Invitation {
  id         Int         @id @default(autoincrement())
  inspectors Inspector[]
}

model Chief {
  id      Int    @id @default(autoincrement())
  email   String @unique
  chiefId String @unique
}
